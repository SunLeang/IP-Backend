// This was generated by AI, for testing purposes only.
// Leave it as it for now. we don't need it.

// import {
//   PrismaClient,
//   SystemRole,
//   CurrentRole,
//   EventStatus,
//   ApplicationStatus,
//   NotificationType,
//   TaskStatus,
//   AttendanceStatus,
//   CommentStatus,
//   VolunteerStatus,
// } from '@prisma/client';
// import * as bcrypt from 'bcrypt';

// const prisma = new PrismaClient();

// async function main() {
//   console.log('Starting database seeding...');

//   // Optional: Clear existing data
//   await clearDatabase();

//   // Create users
//   const admin = await createAdmin();
//   const superAdmin = await createSuperAdmin();
//   const organizer = await createOrganizer();
//   const regularUser1 = await createRegularUser('Regular User 1');
//   const regularUser2 = await createRegularUser('Regular User 2');
//   const regularUser3 = await createRegularUser('Regular User 3');

//   // Create categories
//   const category1 = await createCategory('Charity', 'charity.jpg');
//   const category2 = await createCategory('Education', 'education.jpg');
//   const category3 = await createCategory('Technology', 'technology.jpg');
//   const category4 = await createCategory('Environment', 'environment.jpg');

//   // Create events
//   const event1 = await createEvent({
//     name: 'Charity Run 2025',
//     description: 'Annual charity run to raise funds for local hospitals',
//     organizerId: organizer.id,
//     categoryId: category1.id,
//     location: 'City Park',
//     dateTime: new Date('2025-06-15T09:00:00Z'),
//     status: EventStatus.PUBLISHED,
//     acceptingVolunteers: true,
//     profileImage: 'charity-run.jpg',
//     coverImage: 'charity-run-cover.jpg',
//   });

//   const event2 = await createEvent({
//     name: 'Tech Workshop',
//     description: 'Learn new programming skills',
//     organizerId: organizer.id,
//     categoryId: category2.id,
//     location: 'Community Center',
//     dateTime: new Date('2025-05-22T13:00:00Z'),
//     status: EventStatus.PUBLISHED,
//     acceptingVolunteers: true,
//     profileImage: 'tech-workshop.jpg',
//     coverImage: 'tech-workshop-cover.jpg',
//   });

//   const event3 = await createEvent({
//     name: 'Environmental Cleanup',
//     description: 'Join us in cleaning the local beach',
//     organizerId: organizer.id,
//     categoryId: category4.id,
//     location: 'Sunset Beach',
//     dateTime: new Date('2025-07-03T08:00:00Z'),
//     status: EventStatus.PUBLISHED,
//     acceptingVolunteers: true,
//     profileImage: 'beach-cleanup.jpg',
//     coverImage: 'beach-cleanup-cover.jpg',
//   });

//   const event4 = await createEvent({
//     name: 'Upcoming Hackathon',
//     description: 'A 48-hour coding competition',
//     organizerId: organizer.id,
//     categoryId: category3.id,
//     location: 'Tech Hub',
//     dateTime: new Date('2025-08-15T10:00:00Z'),
//     status: EventStatus.DRAFT,
//     acceptingVolunteers: true,
//     profileImage: 'hackathon.jpg',
//     coverImage: 'hackathon-cover.jpg',
//   });

//   // Create tasks for events
//   const task1 = await createTask({
//     name: 'Registration Setup',
//     description: 'Set up registration tables and materials',
//     eventId: event1.id,
//     type: 'Setup',
//     dueDate: new Date('2025-06-15T07:00:00Z'),
//     status: TaskStatus.PENDING,
//   });

//   const task2 = await createTask({
//     name: 'Route Marking',
//     description: 'Place markers along the run route',
//     eventId: event1.id,
//     type: 'Preparation',
//     dueDate: new Date('2025-06-14T16:00:00Z'),
//     status: TaskStatus.PENDING,
//   });

//   const task3 = await createTask({
//     name: 'Equipment Setup',
//     description: 'Set up computers and projectors',
//     eventId: event2.id,
//     type: 'Technical',
//     dueDate: new Date('2025-05-22T11:00:00Z'),
//     status: TaskStatus.PENDING,
//   });

//   // Create announcements
//   const announcement1 = await createAnnouncement({
//     title: 'Important Update for Charity Run',
//     description: 'The starting point has been changed to the north entrance.',
//     eventId: event1.id,
//     image: 'update.jpg',
//   });

//   const announcement2 = await createAnnouncement({
//     title: 'New Speaker Added',
//     description: 'We have a new guest speaker for the Tech Workshop!',
//     eventId: event2.id,
//   });

//   // Create interests
//   await createInterest(regularUser1.id, event1.id);
//   await createInterest(regularUser2.id, event1.id);
//   await createInterest(regularUser1.id, event2.id);
//   await createInterest(regularUser3.id, event2.id);
//   await createInterest(regularUser2.id, event3.id);

//   // Create attendances
//   await createAttendance({
//     userId: regularUser1.id,
//     eventId: event1.id,
//     status: AttendanceStatus.JOINED,
//     notes: 'Registered early',
//   });

//   await createAttendance({
//     userId: regularUser2.id,
//     eventId: event1.id,
//     status: AttendanceStatus.JOINED,
//   });

//   // Create volunteer applications
//   const application1 = await createApplication({
//     userId: regularUser1.id,
//     eventId: event1.id,
//     whyVolunteer: 'I want to help the community and gain experience.',
//     cvPath: 'user1_cv.pdf',
//     status: ApplicationStatus.PENDING,
//   });

//   const application2 = await createApplication({
//     userId: regularUser2.id,
//     eventId: event2.id,
//     whyVolunteer: 'I have technical skills I would like to share.',
//     cvPath: 'user2_cv.pdf',
//     status: ApplicationStatus.APPROVED,
//     processedAt: new Date(),
//   });

//   // Create event volunteers
//   await createEventVolunteer({
//     userId: regularUser2.id,
//     eventId: event2.id,
//     status: VolunteerStatus.APPROVED,
//     approvedAt: new Date(),
//   });

//   // Create task assignments
//   await createTaskAssignment({
//     taskId: task3.id,
//     volunteerId: regularUser2.id,
//     assignedById: organizer.id,
//     status: TaskStatus.IN_PROGRESS,
//   });

//   // Create comments and ratings
//   await createCommentRating({
//     userId: regularUser1.id,
//     eventId: event1.id,
//     commentText: 'This was a fantastic event!',
//     rating: 5,
//     status: CommentStatus.ACTIVE,
//   });

//   await createCommentRating({
//     userId: regularUser2.id,
//     eventId: event2.id,
//     commentText: 'Very informative workshop.',
//     rating: 4,
//     status: CommentStatus.ACTIVE,
//   });

//   // Create certificates
//   await createCertificate({
//     userId: regularUser2.id,
//     eventId: event2.id,
//     filePath: 'certificates/volunteer_certificate_user2_event2.pdf',
//   });

//   // Create notifications
//   await createNotification({
//     userId: organizer.id,
//     type: NotificationType.APPLICATION_UPDATE,
//     message: `New volunteer application from ${regularUser1.fullName}`,
//     eventId: event1.id,
//     applicationId: application1.id,
//   });

//   await createNotification({
//     userId: regularUser1.id,
//     type: NotificationType.ANNOUNCEMENT,
//     message: 'New announcement for Charity Run 2025: Important Update',
//     eventId: event1.id,
//     announcementId: announcement1.id,
//   });

//   await createNotification({
//     userId: regularUser2.id,
//     type: NotificationType.EVENT_REMINDER,
//     message: 'Tech Workshop is starting tomorrow!',
//     eventId: event2.id,
//   });

//   await createNotification({
//     userId: regularUser2.id,
//     type: NotificationType.TASK_ASSIGNMENT,
//     message: 'You have been assigned to Equipment Setup task',
//     eventId: event2.id,
//   });

//   // Create refresh tokens
//   await createRefreshToken({
//     userId: regularUser1.id,
//     token: 'valid-refresh-token-user1',
//     expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // 7 days
//   });

//   await createRefreshToken({
//     userId: regularUser2.id,
//     token: 'valid-refresh-token-user2',
//     expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // 7 days
//   });

//   await createRefreshToken({
//     userId: organizer.id,
//     token: 'valid-refresh-token-organizer',
//     expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // 7 days
//   });

//   console.log('Database seeding completed successfully!');
// }

// // Helper functions for creating entities
// async function createAdmin() {
//   return prisma.user.upsert({
//     where: { email: 'admin@example.com' },
//     update: {},
//     create: {
//       email: 'admin@example.com',
//       password: await bcrypt.hash('Password123!', 10),
//       fullName: 'Admin User',
//       systemRole: SystemRole.ADMIN,
//       currentRole: CurrentRole.ATTENDEE,
//       username: 'adminuser',
//       gender: 'MALE',
//       age: 35,
//       org: 'Admin Organization',
//     },
//   });
// }

// async function createSuperAdmin() {
//   return prisma.user.upsert({
//     where: { email: 'superadmin@example.com' },
//     update: {},
//     create: {
//       email: 'superadmin@example.com',
//       password: await bcrypt.hash('Password123!', 10),
//       fullName: 'Super Admin',
//       systemRole: SystemRole.SUPER_ADMIN,
//       currentRole: CurrentRole.ATTENDEE,
//       username: 'superadmin',
//       gender: 'FEMALE',
//       age: 40,
//       org: 'Admin Organization',
//     },
//   });
// }

// async function createOrganizer() {
//   return prisma.user.upsert({
//     where: { email: 'organizer@example.com' },
//     update: {},
//     create: {
//       email: 'organizer@example.com',
//       password: await bcrypt.hash('Password123!', 10),
//       fullName: 'Event Organizer',
//       systemRole: SystemRole.USER,
//       currentRole: CurrentRole.ATTENDEE,
//       username: 'organizer',
//       gender: 'FEMALE',
//       age: 32,
//       org: 'Event Planning Co.',
//     },
//   });
// }

// async function createRegularUser(name: string) {
//   const email = name.toLowerCase().replace(/\s+/g, '.') + '@example.com';
//   const username = name.toLowerCase().replace(/\s+/g, '_');
//   return prisma.user.upsert({
//     where: { email },
//     update: {},
//     create: {
//       email,
//       password: await bcrypt.hash('Password123!', 10),
//       fullName: name,
//       systemRole: SystemRole.USER,
//       currentRole: CurrentRole.ATTENDEE,
//       username,
//       gender: Math.random() > 0.5 ? 'MALE' : 'FEMALE',
//       age: 20 + Math.floor(Math.random() * 30),
//       org: 'Local Community',
//     },
//   });
// }

// async function createCategory(name: string, image?: string) {
//   return prisma.eventCategory.upsert({
//     where: { name },
//     update: {},
//     create: {
//       name,
//       image,
//     },
//   });
// }

// async function createEvent(data: any) {
//   return prisma.event.create({
//     data: {
//       name: data.name,
//       description: data.description,
//       locationDesc: data.location,
//       dateTime: data.dateTime,
//       status: data.status,
//       acceptingVolunteers: data.acceptingVolunteers,
//       profileImage: data.profileImage,
//       coverImage: data.coverImage,
//       locationImage: data.locationImage,
//       organizer: { connect: { id: data.organizerId } },
//       category: { connect: { id: data.categoryId } },
//     },
//   });
// }

// async function createTask(data: any) {
//   return prisma.task.create({
//     data: {
//       name: data.name,
//       description: data.description,
//       type: data.type,
//       dueDate: data.dueDate,
//       status: data.status,
//       event: { connect: { id: data.eventId } },
//     },
//   });
// }

// async function createTaskAssignment(data: any) {
//   return prisma.taskAssignment.create({
//     data: {
//       task: { connect: { id: data.taskId } },
//       volunteer: { connect: { id: data.volunteerId } },
//       assignedBy: { connect: { id: data.assignedById } },
//       status: data.status || TaskStatus.PENDING,
//       assignedAt: new Date(),
//     },
//   });
// }

// async function createAnnouncement(data: any) {
//   return prisma.announcement.create({
//     data: {
//       title: data.title,
//       description: data.description,
//       image: data.image,
//       event: { connect: { id: data.eventId } },
//     },
//   });
// }

// async function createInterest(userId: string, eventId: string) {
//   return prisma.eventInterest.create({
//     data: {
//       user: { connect: { id: userId } },
//       event: { connect: { id: eventId } },
//     },
//   });
// }

// async function createAttendance(data: any) {
//   return prisma.eventAttendance.create({
//     data: {
//       user: { connect: { id: data.userId } },
//       event: { connect: { id: data.eventId } },
//       status: data.status || AttendanceStatus.JOINED,
//       notes: data.notes,
//       registeredBy: data.registeredBy,
//       checkedInAt: data.checkedInAt,
//     },
//   });
// }

// async function createApplication(data: any) {
//   return prisma.volunteerApplication.create({
//     data: {
//       user: { connect: { id: data.userId } },
//       event: { connect: { id: data.eventId } },
//       whyVolunteer: data.whyVolunteer, // Fixed field name
//       cvPath: data.cvPath, // Added required field
//       status: data.status,
//       processedAt: data.processedAt,
//     },
//   });
// }

// async function createEventVolunteer(data: any) {
//   return prisma.eventVolunteer.create({
//     data: {
//       user: { connect: { id: data.userId } },
//       event: { connect: { id: data.eventId } },
//       status: data.status,
//       approvedAt: data.approvedAt,
//     },
//   });
// }

// async function createCommentRating(data: any) {
//   return prisma.commentRating.create({
//     data: {
//       user: { connect: { id: data.userId } },
//       event: { connect: { id: data.eventId } },
//       commentText: data.commentText,
//       rating: data.rating,
//       status: data.status || CommentStatus.ACTIVE,
//     },
//   });
// }

// async function createCertificate(data: any) {
//   return prisma.certificate.create({
//     data: {
//       user: { connect: { id: data.userId } },
//       event: { connect: { id: data.eventId } },
//       filePath: data.filePath,
//     },
//   });
// }

// async function createNotification(data: any) {
//   return prisma.notification.create({
//     data: {
//       userId: data.userId,
//       type: data.type,
//       message: data.message,
//       read: data.read || false,
//       ...(data.eventId && { eventId: data.eventId }),
//       ...(data.announcementId && { announcementId: data.announcementId }),
//       ...(data.applicationId && { applicationId: data.applicationId }),
//     },
//   });
// }

// async function createRefreshToken(data: any) {
//   return prisma.refreshToken.create({
//     data: {
//       token: data.token,
//       expiresAt: data.expiresAt,
//       user: { connect: { id: data.userId } },
//       isRevoked: data.isRevoked || false,
//       revokedAt: data.revokedAt,
//     },
//   });
// }

// // Function to clear database (use with caution)
// async function clearDatabase() {
//   // Delete in reverse order of dependencies
//   await prisma.refreshToken.deleteMany({});
//   await prisma.notification.deleteMany({});
//   await prisma.certificate.deleteMany({});
//   await prisma.commentRating.deleteMany({});
//   await prisma.taskAssignment.deleteMany({});
//   await prisma.task.deleteMany({});
//   await prisma.eventInterest.deleteMany({});
//   await prisma.eventAttendance.deleteMany({});
//   await prisma.eventVolunteer.deleteMany({});
//   await prisma.volunteerApplication.deleteMany({});
//   await prisma.announcement.deleteMany({});
//   await prisma.event.deleteMany({});
//   await prisma.eventCategory.deleteMany({});
//   await prisma.user.deleteMany({});
// }

// main()
//   .catch((e) => {
//     console.error('Error during seeding:', e);
//     process.exit(1);
//   })
//   .finally(async () => {
//     await prisma.$disconnect();
//   });
